#!/usr/bin/env nodeimport yargs from 'yargs';import { hideBin } from 'yargs/helpers';import { GrowthFetcher } from '../fetchers/growthFetcher.js';import { ErrorHandler } from '../utils/errorHandler.js';import { setupCliSignalHandler } from '../utils/signalHandler.js';import { processStocks } from '../utils/batchProcessor.js';import ora from 'ora';import { DEFAULT_STOCK_CODES } from '../constants/stocks.js';const argv = yargs(hideBin(process.argv))  .option('stocks', {    alias: 's',    type: 'string',    description: 'Comma-separated stock codes (e.g., 2330,2454)',  })  .option('no-cache', {    type: 'boolean',    description: 'Disable cache usage',    default: false,  })  .option('type', {    alias: 't',    type: 'string',    choices: ['revenue', 'eps', 'both'],    default: 'both',    description: 'Type of growth data to fetch',  })  .help()  .parseSync();async function main(): Promise<void> {  // 設置信號處理  const signalHandler = setupCliSignalHandler('抓取成長資料');  try {    await ErrorHandler.initialize();    const initSpinner = ora('🚀 開始抓取成長資料...').start();    const fetcher = new GrowthFetcher();    await fetcher.initialize();        // 添加清理函數    signalHandler.addCleanupFunction(async () => {      await fetcher.close();    });        initSpinner.succeed('初始化完成');    const stockList = argv.stocks      ? argv.stocks.split(',').map((s: string) => s.trim())      : DEFAULT_STOCK_CODES;    console.log(`📊 將抓取 ${stockList.length} 支股票的成長資料`);    let totalSuccessful = 0;    let totalFailed = 0;    if (argv.type === 'revenue' || argv.type === 'both') {      console.log('\n📈 開始抓取營收資料...');            const result = await processStocks(stockList, async (stockCode: string) => {        return await fetcher.fetchRevenueData({          stockNos: [stockCode],          useCache: !argv['no-cache'],        });      }, {        progressPrefix: '抓取營收資料',        concurrency: 5,        maxRetries: 2,        skipOnError: true,        onError: (stockCode, error) => {          if (error.message.includes('402 Payment Required')) {            console.log(`⚠️  ${stockCode} - FinMind API 配額不足，跳過此股票`);          } else {            console.log(`❌ ${stockCode} 營收資料抓取失敗: ${error.message}`);          }        }      });      totalSuccessful += result.successful.length;      totalFailed += result.failed.length;      console.log(`📊 營收資料抓取結果: 成功 ${result.successful.length}, 失敗 ${result.failed.length}`);    }    if (argv.type === 'eps' || argv.type === 'both') {      console.log('\n💰 開始抓取 EPS 資料...');            const result = await processStocks(stockList, async (stockCode: string) => {        return await fetcher.fetchEpsData({          stockNos: [stockCode],          useCache: !argv['no-cache'],        });      }, {        progressPrefix: '抓取 EPS 資料',        concurrency: 5,        maxRetries: 2,        skipOnError: true,        onError: (stockCode, error) => {          if (error.message.includes('402 Payment Required')) {            console.log(`⚠️  ${stockCode} - FinMind API 配額不足，跳過此股票`);          } else {            console.log(`❌ ${stockCode} EPS 資料抓取失敗: ${error.message}`);          }        }      });      totalSuccessful += result.successful.length;      totalFailed += result.failed.length;      console.log(`📊 EPS 資料抓取結果: 成功 ${result.successful.length}, 失敗 ${result.failed.length}`);    }    await fetcher.close();    console.log(`\n✅ 成長資料抓取完成 - 總計成功: ${totalSuccessful}, 失敗: ${totalFailed}`);  } catch (error) {    await ErrorHandler.logError(error as Error, 'fetch-growth');        if ((error as Error).message.includes('402 Payment Required')) {      console.error('⚠️  FinMind API 配額不足，請稍後再試或考慮升級方案');    } else {      console.error('❌ 錯誤:', (error as Error).message);    }    process.exit(1);  }}if (import.meta.url === `file://${process.argv[1]}`) {  main();}